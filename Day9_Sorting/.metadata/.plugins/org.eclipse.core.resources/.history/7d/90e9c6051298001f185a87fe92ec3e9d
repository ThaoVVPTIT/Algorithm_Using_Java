package cdac.excersise;

import java.util.PriorityQueue;
import java.util.concurrent.PriorityBlockingQueue;

import cdac.nodeList.ListNode;

public class LeetCode_MergeSortedLinkList {
	public static ListNode mergeKLists(ListNode []list)
	{
		if(list == null || list.length == 0)
		{
			return  null;
		}
		PriorityQueue<ListNode> queuePriority = new PriorityQueue<ListNode>((a, b) -> a.data - b.data);
		for(ListNode l : list)
		{
			if(l != null) queuePriority.offer(l);
		}
		ListNode result = new ListNode(0);
		ListNode current = result;
		while(!queuePriority.isEmpty())
		{
			ListNode minNode = queuePriority.poll();
			current.next = minNode;
			current = current.next;
			if(minNode != null)
			{
				queuePriority.offer(minNode);
			}
		}
		return null;
	}
	public static void main(String[] args) {
		ListNode[] lists = new ListNode[3];
		lists[0] = new ListNode(1);
		lists[0].next = new ListNode(4);
		lists[0].next.next = new ListNode(5);

		lists[1] = new ListNode(1);
		lists[1].next = new ListNode(3);
		lists[1].next.next = new ListNode(4);

		lists[2] = new ListNode(2);
		lists[2].next = new ListNode(6);

		LeetCode_MergeSortedLinkList solution = new LeetCode_MergeSortedLinkList();
		ListNode mergedList = solution.mergeKLists(lists);

		System.out.print("Merged list: ");
		printList(mergedList);
	}
}

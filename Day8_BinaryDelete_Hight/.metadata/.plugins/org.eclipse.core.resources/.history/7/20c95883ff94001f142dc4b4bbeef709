package cdac.insertTreeNode;


public class CounterEdgesMaxTreeNode implements FunctionTreeNode{
	public TreeNode roots;
	
	private void insert(TreeNode root, int element)
	{
		if(root == null)
		{
			root = new TreeNode(element);
			return;
		}
		TreeNode CurrentNode = root;
		while(CurrentNode != null)
		{
			if(element < CurrentNode.data)
			{
				if(CurrentNode.leftChild != null)
				{
					insert(root.leftChild, element);
				}
				else root.leftChild = new TreeNode(element);
			}
			else
			{
				if(CurrentNode.rightChild != null)
				{
					insert(root.rightChild, element);
				}
				else root.leftChild = new TreeNode(element);
			}
		}
	}
	@Override
	public void insert(int element) {
		insert(roots, element);
	}
	private void delete(TreeNode root, int element)
	{
		/*Step 1: Finding node i want to delete*/
		TreeNode current = root;
		TreeNode parent = null; /*Store parent of Node current*/
		while(current != null)
		{
			if(current.data == element)
			{
				break;
			}
			parent = current;
			if(element < current.data)
			{
				current = current.leftChild;
			}
			else current = current.rightChild;
		}
		if(current == null)
		{
			return;
		}
		/*DElete leaf node*/
		if(current.leftChild == null && current.rightChild == null)
		{
			if(current == root)
			{
				root = null;
				return;
			}
			if(current == parent.leftChild)
			{
				parent.leftChild = null;
			}
			if(current == parent.rightChild)
			{
				parent.rightChild = null;
			}
			return;
		}
		/* To track only child of current.*/
		TreeNode childOldCurrent = null;
		if(current.leftChild == null)
		{
			childOldCurrent = current.rightChild;
		}
		if(current.rightChild == null)
		{
			childOldCurrent = current.leftChild;
		}
		if(childOldCurrent != null)
		{
			if(current == parent.leftChild)
			{
				parent.leftChild = childOldCurrent;
			}
			if(current == parent.rightChild)
			{
				parent.rightChild = childOldCurrent;
			}
			return;
		}
		/*current has two children !!!
		Find inorder successor of current*/
		TreeNode inoderSuccessorParent = null;
		TreeNode inoderSuccessor = current.rightChild;
		while(current.leftChild != null)
		{
			
		}
	}
	@Override
	public void delete(int element) {
		
		
	}
	
}

package cdac.levelOrder;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BinaryTreeLevelOrder {
	public BNTree roots;
	public BinaryTreeLevelOrder() {
		
	}
	public List<List<Integer>> levelOrder(BNTree root) {
		List<List<Integer>> result = new ArrayList<>();
		if(root == null)
		{
			return result;
		}
		Queue<BNTree> q = new LinkedList<BNTree>();
		while(!q.isEmpty())
		{
			/*Counter Node at same level*/
			int levelsize = q.size();
			List<Integer> currentlevel = new ArrayList<>();
			for (int i = 0; i < levelsize; i++) {
				BNTree currentNode = q.poll();
				currentlevel.add(currentNode.data);
				if(currentNode.leftchild != null)
				{
					q.offer(currentNode.leftchild);
				}
				if(currentNode.rightchild != null)
				{
					q.offer(currentNode);
				}
			}
		}
	}
}

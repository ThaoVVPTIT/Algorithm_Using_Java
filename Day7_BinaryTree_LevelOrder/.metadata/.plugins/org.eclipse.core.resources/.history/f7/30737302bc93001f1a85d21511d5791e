package cdac.binaryLeetCode;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class BinaryTreeLevelTraverselOrder implements BNTreeFunctional{
	public BNTree root;
	public BinaryTreeLevelTraverselOrder() {}
	
	private List<List<Integer>> levelOrder(BNTree root, int val)
	{
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		if(root == null)
		{
			return result;
		}
		Queue<BNTree> q = new LinkedList<BNTree>();
		q.offer(root);
		
		while(!q.isEmpty())
		{
			/*Size of Node the same level*/
			int levelSize = q.size();
			List<Integer> treeNodeTheSameLevel = new ArrayList<Integer>();
			for(int i = 0; i < levelSize; i++)
			{
				BNTree currentNode = q.poll()
			}
				
		}
	}
	@Override
	public void levelOrder(int element) {
		
	}
	
}
